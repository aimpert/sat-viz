{"version":3,"file":"js/app.e46475bd.js","mappings":"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","sources":["webpack://frontend/./src/App.vue","webpack://frontend/./src/components/MainPage.vue","webpack://frontend/./src/components/MainPage.vue?b3e7","webpack://frontend/./src/App.vue?7ccd","webpack://frontend/./src/three/core-utils.js","webpack://frontend/./src/three/common-utils.js","webpack://frontend/./src/shaders/earth/vertex.glsl","webpack://frontend/./src/shaders/earth/fragment.glsl","webpack://frontend/./src/shaders/atmosphere/vertex.glsl","webpack://frontend/./src/shaders/atmosphere/fragment.glsl","webpack://frontend/./src/main.js","webpack://frontend/webpack/bootstrap","webpack://frontend/webpack/runtime/chunk loaded","webpack://frontend/webpack/runtime/compat get default export","webpack://frontend/webpack/runtime/define property getters","webpack://frontend/webpack/runtime/global","webpack://frontend/webpack/runtime/hasOwnProperty shorthand","webpack://frontend/webpack/runtime/make namespace object","webpack://frontend/webpack/runtime/publicPath","webpack://frontend/webpack/runtime/jsonp chunk loading","webpack://frontend/webpack/startup"],"sourcesContent":["<template>\n  <MainPage msg=\"Hello there!!!!\"/>\n</template>\n\n<script>\nimport MainPage from './components/MainPage.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    MainPage\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n","<template>\n  Stuff:\n  <div>\n    <ul>\n      <li v-for=\"(item, index) in items\" :key=\"index\">\n        {{ item }}\n      </li> \n\n    </ul>\n\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'MainPage',\n  props: {\n    msg: String\n  },\n  data() {\n    return {\n      items: [],\n    };\n  },\n  mounted() {\n    this.fetchItems();\n  },\n  methods: {\n    async fetchItems() {\n      try {\n        const response = await axios.get(\n          'http://34.218.224.225:8000/test',\n          {\n            headers: {\n              'Access-Control-Allow-Origin': '*',\n              'Content-Type': 'application/json',\n            }\n          }\n        );\n        //const response = await axios.get('http://34.218.224.225:8000/test');\n        this.items = response.data;\n      }\n      catch (error) {\n        console.error(\"Failed to fetch items:\", error);\n      }\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n","import { render } from \"./MainPage.vue?vue&type=template&id=39208c8a&scoped=true\"\nimport script from \"./MainPage.vue?vue&type=script&lang=js\"\nexport * from \"./MainPage.vue?vue&type=script&lang=js\"\n\nimport \"./MainPage.vue?vue&type=style&index=0&id=39208c8a&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-39208c8a\"]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=fd92ae5a\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=fd92ae5a&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import * as THREE from \"three\"\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\"\nimport { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\"\n\nglobal.THREE = THREE\n\nexport const getDefaultUniforms = () => {\n    return {\n        u_time: { value: 0.0 },\n        u_mouse: {\n            value: {\n                x: 0.0,\n                y: 0.0\n            }\n        },\n        u_resolution: {\n            value: {\n                x: window.innerWidth * window.devicePixelRatio,\n                y: window.innerHeight * window.devicePixelRatio\n            }\n        }\n    }\n}\n\nexport const runApp = (app, scene, renderer, camera, enableAnimation = false, uniforms = getDefaultUniforms(), composer = null) => {\n    const container = document.getElementById(\"container\")\n    container.appendChild(renderer.domElement)\n\n    window.addEventListener(\"resize\", () => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n\n        if (uniforms.u_resolution !== undefined) {\n            uniforms.u_resolution.value.x = window.innerWidth * window.devicePixelRatio\n            uniforms.u_resolution.value.y = window.innerHeight * window.devicePixelRatio\n        }\n\n        if (typeof app.resize === 'function') {\n            app.resize();\n        }\n    })\n\n    const mouseListener = (e) => {\n        uniforms.u_mouse.value.x = e.touches ? e.touches[0].clientX : e.clientX\n        uniforms.u_mouse.value.y = e.touches ? e.touches[0].clientY : e.clientY\n    }\n    if (\"ontouchstart\" in window) {\n        window.addEventListener(\"touchmove\", mouseListener);\n    }\n    else {\n        window.addEventListener(\"mousemove\", mouseListener);\n    }\n\n    if (app.updateScene === undefined) {\n        app.updateScene = (delta, elapsed) => {};\n    }\n    Object.assign(app, { ...app, container});\n\n    const clock = new THREE.Clock();\n    const animate = () => {\n        if (enableAnimation) {\n            requestAnimationFrame(animate);\n        }\n\n        const delta = clock.getDelta();\n        const elapsed = clock.getElapsedTime();\n        uniforms.u_time.value = elapsed;\n\n        app.updateScene(delta, elapsed);\n\n        if (composer === null) {\n            renderer.render(scene, camera);\n        }\n        else {\n            composer.render()\n        }\n    }\n\n    app.initScene()\n        .then(() => {\n            const veil = document.getElementById(\"veil\")\n            veil.style.opacity = 0\n            const progressBar = document.getElementById(\"progress-bar\")\n            progressBar.style.opacity = 0\n            return true\n        })\n        .then(animate)\n        .then(() => {\n            renderer.info.reset()\n            console.log(\"Renderer info\", renderer.info)\n        })\n        .catch((error) => {\n            console.log(error);\n        });\n}\n\nexport const createRenderer = (rendererProps = {}, configureRenderer = (renderer) => { }) => {\n    const renderer = new THREE.WebGLRenderer(rendererProps)\n    renderer.setPixelRatio(window.devicePixelRatio)\n    renderer.setSize(window.innerWidth, window.innerHeight)\n    // renderer.setClearColor('#333333')\n\n    // more configurations to the renderer from the consumer\n    configureRenderer(renderer)\n\n    return renderer\n}\n\nexport const createComposer = (renderer, scene, camera, extraPasses) => {\n    const renderScene = new RenderPass(scene, camera)\n\n    let composer = new EffectComposer(renderer)\n    composer.addPass(renderScene)\n\n\n    extraPasses(composer)\n\n    return composer\n}\n\nexport const createCamera = (\n    fov = 45,\n    near = 0.1,\n    far = 100,\n    camPos = { x: 0, y: 0, z: 5 },\n    camLookAt = { x: 0, y: 0, z: 0 },\n    aspect = window.innerWidth / window.innerHeight,\n) => {\n    const camera = new THREE.PerspectiveCamera(fov, aspect, near, far)\n    camera.position.set(camPos.x, camPos.y, camPos.z)\n    camera.lookAt(camLookAt.x, camLookAt.y, camLookAt.z) // this only works when there's no OrbitControls\n    camera.updateProjectionMatrix()\n    return camera\n}\n\nexport const updateLoadingProgressBar = async (frac, delay=200) => {\n    return new Promise(resolve => {\n        const progress = document.getElementById(\"progress\")\n        // 200px is the width of the progress bar defined in index.html\n        progress.style.width = `${frac * 200}px`\n        setTimeout(resolve, delay)\n    })\n}","import * as THREE from \"three\"\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader\"\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\n\nglobal.THREE = THREE\n\nexport const hexToRgb = (hex, forShaders = false) => {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    if (forShaders) {\n        return result ? {\n            r: parseInt(result[1], 16) / 255,\n            g: parseInt(result[2], 16) / 255,\n            b: parseInt(result[3], 16) / 255\n        } : null;\n    }\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\nexport const loadHDRI = (url) => {\n    return new Promise((resolve) => {\n        const hdrEquirect = new RGBELoader().load(url, function () {\n            hdrEquirect.mapping = THREE.EquirectangularReflectionMapping\n            resolve(hdrEquirect)\n        })\n    })\n}\n\nexport const loadTexture = async (url) => {\n    let textureLoader = new THREE.TextureLoader()\n    return new Promise(resolve => {\n        textureLoader.load(url, texture => {\n            resolve(texture)\n        })\n    })\n}\n\nexport const loadModel = async (url) => {\n    let modelLoader = new GLTFLoader()\n    return new Promise(resolve => {\n        modelLoader.load(url, gltf => {\n            const result = { model: gltf.scene }\n            resolve(result)\n        })\n    })\n}\n\nexport const maintainBgAspect = (scene, backgroundImageWidth, backgroundImageHeight) => {\n    var windowSize = function (withScrollBar) {\n        var wid = 0\n        var hei = 0\n        if (typeof window.innerWidth != \"undefined\") {\n            wid = window.innerWidth\n            hei = window.innerHeight\n        } else {\n            if (document.documentElement.clientWidth == 0) {\n                wid = document.body.clientWidth\n                hei = document.body.clientHeight\n            } else {\n                wid = document.documentElement.clientWidth\n                hei = document.documentElement.clientHeight\n            }\n        }\n        return { width: wid - (withScrollBar ? wid - document.body.offsetWidth + 1 : 0), height: hei }\n    }\n\n    if (scene.background) {\n        var size = windowSize(true)\n        var factor = backgroundImageWidth / backgroundImageHeight / (size.width / size.height)\n\n        scene.background.offset.x = factor > 1 ? (1 - 1 / factor) / 2 : 0\n        scene.background.offset.y = factor > 1 ? 0 : (1 - factor) / 2\n\n        scene.background.repeat.x = factor > 1 ? 1 / factor : 1\n        scene.background.repeat.y = factor > 1 ? 1 : factor\n    }\n}","export default \"varying vec2 vUv;\\nvarying vec3 vNormal;\\nvarying vec3 vPosition;\\n\\nvoid main()\\n{\\n    // Position\\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\\n\\n    // Model normal\\n    vec3 modelNormal = (modelMatrix * vec4(normal, 0.0)).xyz;\\n\\n    // Varyings\\n    vUv = uv;\\n    vNormal = modelNormal;\\n    vPosition = modelPosition.xyz;\\n}\";","export default \"uniform sampler2D uDayTexture;\\nuniform sampler2D uNightTexture;\\nuniform sampler2D uSpecularCloudsTexture;\\nuniform vec3 uSunDirection;\\nuniform vec3 uAtmosphereDayColor;\\nuniform vec3 uAtmosphereTwilightColor;\\n\\nvarying vec2 vUv;\\nvarying vec3 vNormal;\\nvarying vec3 vPosition;\\n\\nvoid main()\\n{\\n    vec3 viewDirection = normalize(vPosition - cameraPosition);\\n    vec3 normal = normalize(vNormal);\\n    vec3 color = vec3(0.0);\\n\\n    // Sun \\n    \\n    float sunOrientation = dot(uSunDirection, normal);\\n    //color = vec3(sunOrientation);\\n\\n    // Day / night\\n    float dayMix = smoothstep(-0.3, 0.5, sunOrientation);\\n    vec3 dayColor = texture(uDayTexture, vUv).rgb;\\n    vec3 nightColor = texture(uNightTexture, vUv).rgb;\\n    color = mix(nightColor, dayColor, dayMix);\\n\\n    // Clouds\\n    vec2 specularCloudsColor = texture(uSpecularCloudsTexture, vUv).rg;\\n    \\n    float cloudsMix = smoothstep(0.2, 1.0, specularCloudsColor.g);\\n    cloudsMix *= dayMix;\\n    color = mix(color, vec3(1.0), cloudsMix);\\n\\n    // Fresnel\\n    float fresnel = dot(viewDirection, normal) + 1.0;\\n    fresnel = pow(fresnel, 2.0);\\n\\n    // Atmosphere\\n    float atmosphereDayMix = smoothstep(-0.5, 1.0, sunOrientation);\\n    vec3 atmosphereColor = mix(uAtmosphereTwilightColor, uAtmosphereDayColor, atmosphereDayMix);\\n    \\n    color = mix(color, atmosphereColor, fresnel * atmosphereDayMix);\\n\\n    // Specular\\n    vec3 reflection = reflect(-uSunDirection, normal);\\n    float specular = -dot(reflection, viewDirection);\\n    specular = max(specular, 0.0);\\n    specular = pow(specular, 16.0);\\n    specular *= specularCloudsColor.r;\\n    specular *= 0.25;\\n\\n    vec3 specularColor = mix(vec3(1.0), atmosphereColor, fresnel);\\n    color += specular * specularColor;\\n\\n\\n\\n    // Final color\\n    gl_FragColor = vec4(color, 1.0);\\n    #include <tonemapping_fragment>\\n    #include <colorspace_fragment>\\n}\";","export default \"varying vec3 vNormal;\\nvarying vec3 vPosition;\\n\\nvoid main()\\n{\\n    // Position\\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\\n    gl_Position = projectionMatrix * viewMatrix * modelPosition;\\n\\n    // Model normal\\n    vec3 modelNormal = (modelMatrix * vec4(normal, 0.0)).xyz;\\n\\n    // Varyings\\n    vNormal = modelNormal;\\n    vPosition = modelPosition.xyz;\\n}\";","export default \"uniform vec3 uSunDirection;\\nuniform vec3 uAtmosphereDayColor;\\nuniform vec3 uAtmosphereTwilightColor;\\n\\nvarying vec3 vNormal;\\nvarying vec3 vPosition;\\n\\nvoid main()\\n{\\n    vec3 viewDirection = normalize(vPosition - cameraPosition);\\n    vec3 normal = normalize(vNormal);\\n    vec3 color = vec3(0.0);\\n\\n    // Sun \\n    float sunOrientation = dot(uSunDirection, normal);\\n\\n    // Atmosphere\\n    float atmosphereDayMix = smoothstep(-0.5, 1.0, sunOrientation);\\n    vec3 atmosphereColor = mix(uAtmosphereTwilightColor, uAtmosphereDayColor, atmosphereDayMix);\\n    color += atmosphereColor;\\n\\n    // Alpha\\n    float edgeAlpha = dot(viewDirection, normal);\\n    edgeAlpha = smoothstep(0.0, 0.5, edgeAlpha);\\n\\n    float dayAlpha = smoothstep(-0.5, 0.0, sunOrientation);\\n    float alpha = edgeAlpha * dayAlpha;\\n\\n    // Final color\\n    gl_FragColor = vec4(color, alpha);\\n    #include <tonemapping_fragment>\\n    #include <colorspace_fragment>\\n}\";","import { createApp } from 'vue'\nimport App from './App.vue'\n\nimport * as THREE from \"three\"\nimport * as dat from 'dat.gui'\nimport Stats from \"three/examples/jsm/libs/stats.module\"\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"\n\n// Core boilerplate code deps\nimport { createCamera, createRenderer, runApp, updateLoadingProgressBar } from \"./three/core-utils\"\n\n// Other deps\nimport { loadTexture } from \"./three/common-utils\"\nimport Day from \"./assets/day.jpg\"\nimport Clouds from \"./assets/specularClouds.jpg\"\nimport Night from \"./assets/night.jpg\"\nimport StarMap from \"./assets/starmap.png\"\nimport earthVertexShader from \"./shaders/earth/vertex.glsl\"\nimport earthFragmentShader from \"./shaders/earth/fragment.glsl\"\nimport atmosphereVertexShader from \"./shaders/atmosphere/vertex.glsl\"\nimport atmosphereFragmentShader from \"./shaders/atmosphere/fragment.glsl\"\n\nglobal.THREE = THREE\n// previously this feature is .legacyMode = false, see https://www.donmccurdy.com/2020/06/17/color-management-in-threejs/\n// turning this on has the benefit of doing certain automatic conversions (for hexadecimal and CSS colors from sRGB to linear-sRGB)\nTHREE.ColorManagement.enabled = true\n\n/**************************************************\n * 0. Tweakable parameters for the scene\n *************************************************/\n\n\n\n/**************************************************\n * 1. Initialize core threejs components\n *************************************************/\n// Create the scene\nlet scene = new THREE.Scene()\n\n// Create the renderer via 'createRenderer',\n// 1st param receives additional WebGLRenderer properties\n// 2nd param receives a custom callback to further configure the renderer\nlet renderer = createRenderer({ antialias: true }, (_renderer) => {\n  // best practice: ensure output colorspace is in sRGB, see Color Management documentation:\n  // https://threejs.org/docs/#manual/en/introduction/Color-management\n  _renderer.outputColorSpace = THREE.SRGBColorSpace\n})\n\n// Create the camera\n// Pass in fov, near, far and camera position respectively\nlet camera = createCamera(45, 1, 1000, { x: 0, y: 0, z: 20 })\n\n\n/**************************************************\n * 2. Build your scene in this threejs app\n * This app object needs to consist of at least the async initScene() function (it is async so the animate function can wait for initScene() to finish before being called)\n * initScene() is called after a basic threejs environment has been set up, you can add objects/lighting to you scene in initScene()\n * if your app needs to animate things(i.e. not static), include a updateScene(interval, elapsed) function in the app as well\n *************************************************/\nlet app = {\n  async initScene() {\n    // OrbitControls\n    this.controls = new OrbitControls(camera, renderer.domElement)\n    this.controls.enableDamping = true\n\n    // adding a virtual sun using directional light\n    // this.dirLight = new THREE.DirectionalLight(0xffffff, params.sunIntensity)\n    // this.dirLight.position.set(-50, 0, 30)\n    // scene.add(this.dirLight)\n\n    const earthParameters = {}\n    earthParameters.atmosphereDayColor = '#00aaff'\n    earthParameters.atmosphereTwilightColor = '#ff6600'\n    //earthParameters.atmosphereTwilightColor = '#00aaff'\n\n    const earthDayTexture = await loadTexture(Day)\n    earthDayTexture.colorSpace = THREE.SRGBColorSpace\n    earthDayTexture.anisotropy = 8\n    await updateLoadingProgressBar(0.2)\n    const earthNightTexture = await loadTexture(Night)\n    earthNightTexture.colorSpace = THREE.SRGBColorSpace\n    earthNightTexture.anisotropy = 8\n    await updateLoadingProgressBar(0.4)\n    const earthSpecularCloudsTexture = await loadTexture(Clouds)\n    earthSpecularCloudsTexture.anisotropy = 8\n    await updateLoadingProgressBar(0.6)\n\n    const envMap = await loadTexture(StarMap)\n    envMap.colorSpace = THREE.SRGBColorSpace\n    envMap.mapping = THREE.EquirectangularReflectionMapping\n    await updateLoadingProgressBar(0.8)\n    scene.background = envMap\n    this.group = new THREE.Group()\n    // earth's axial tilt is 23.5 degrees\n    this.group.rotation.z = -(23.5 / 360 * 2 * Math.PI)\n\n    const now = new Date();\n    const dayOfYear = (Date.UTC(now.getFullYear(), now.getMonth(), now.getDate()) - Date.UTC(now.getFullYear(), 0, 0)) / 86400000;\n    const declination = 23.44 * Math.cos(((360 / 365) * (dayOfYear + 10)) * (Math.PI / 180));\n\n    const earthTilt = declination * (Math.PI / 180);\n    const utcHours = now.getUTCHours() + now.getUTCMinutes() / 60 + now.getUTCSeconds() / 3600;\n    const sunAngle = (utcHours / 24) * 2 * Math.PI;\n\n    this.sunDirection = new THREE.Vector3(\n        -Math.cos(sunAngle),\n        Math.sin(earthTilt),\n        -Math.sin(sunAngle)\n    );\n    this.sunDirection.normalize()\n\n    this.earthGeometry = new THREE.SphereGeometry(5, 128, 128)\n    this.earthMaterial = new THREE.ShaderMaterial({\n      vertexShader: earthVertexShader,\n      fragmentShader: earthFragmentShader,\n      uniforms: {\n        uDayTexture: new THREE.Uniform(earthDayTexture),\n        uNightTexture: new THREE.Uniform(earthNightTexture),\n        uSpecularCloudsTexture: new THREE.Uniform(earthSpecularCloudsTexture),\n        uSunDirection: new THREE.Uniform(this.sunDirection),\n        uAtmosphereDayColor: new THREE.Uniform(new THREE.Color(earthParameters.atmosphereDayColor)),\n        uAtmosphereTwilightColor: new THREE.Uniform(new THREE.Color(earthParameters.atmosphereTwilightColor))\n      }\n    })\n    this.earth = new THREE.Mesh(this.earthGeometry, this.earthMaterial)\n\n    // const rightnow = new Date();\n    // const rotation = (2 * Math.PI) / 86164;\n    // this.earth.rotation.y += rotation * (rightnow - this.startTime) / 1000;\n    this.group.add(this.earth)\n\n    const atmosphereMaterial = new THREE.ShaderMaterial({\n      vertexShader: atmosphereVertexShader,\n      fragmentShader: atmosphereFragmentShader,\n      side: THREE.BackSide,\n      transparent: true,\n      uniforms: {\n        uSunDirection: new THREE.Uniform(this.sunDirection),\n        uAtmosphereDayColor: new THREE.Uniform(new THREE.Color(earthParameters.atmosphereDayColor)),\n        uAtmosphereTwilightColor: new THREE.Uniform(new THREE.Color(earthParameters.atmosphereTwilightColor))\n      }\n    });\n    const atmosphere = new THREE.Mesh(this.earthGeometry, atmosphereMaterial);\n    atmosphere.scale.set(1.016, 1.016, 1.016)\n    scene.add(atmosphere)\n\n    scene.add(this.group)\n\n\n    this.sunSpherical = new THREE.Spherical(1, Math.PI * 0.5, 0.5)\n    // this.sunDirection = new THREE.Vector3()\n\n    this.debugSun = new THREE.Mesh(\n      new THREE.IcosahedronGeometry(0.1, 2),\n      new THREE.MeshBasicMaterial()\n    )\n    scene.add(this.debugSun)\n\n    // this.updateSun = () =>\n    // {\n    //   this.sunDirection.setFromSpherical(this.sunSpherical)\n\n    //   this.debugSun.position.copy(this.sunDirection).multiplyScalar(5)\n\n    //   this.earthMaterial.uniforms.uSunDirection.value.copy(this.sunDirection)\n    //   atmosphereMaterial.uniforms.uSunDirection.value.copy(this.sunDirection)\n    // }\n    // this.updateSun()\n\n    \n\n    // const gui = new dat.GUI()\n    // gui.add(params, \"sunIntensity\", 0.0, 5.0, 0.1).onChange((val) => {\n    //   this.dirLight.intensity = val\n    // }).name(\"Sun Intensity\")\n    // gui.add(this.sunSpherical, 'phi').min(0).max(Math.PI).onChange(this.updateSun)\n    // gui.add(this.sunSpherical, 'theta').min(- Math.PI).max(Math.PI).onChange(this.updateSun)\n    // gui.addColor(earthParameters, \"atmosphereDayColor\").onChange(() =>\n    //   {\n    //     this.earthMaterial.uniforms.uAtmosphereDayColor.value.set(earthParameters.atmosphereDayColor)\n    //     atmosphereMaterial.uniforms.uAtmosphereDayColor.value.set(earthParameters.atmosphereDayColor)\n    //   }\n    //   )\n    // gui.addColor(earthParameters, \"atmosphereTwilightColor\").onChange(() =>\n    //   {\n    //     this.earthMaterial.uniforms.uAtmosphereTwilightColor.value.set(earthParameters.atmosphereTwilightColor)\n    //     atmosphereMaterial.uniforms.uAtmosphereTwilightColor.value.set(earthParameters.atmosphereTwilightColor)\n    //   }\n    //   )\n    // Stats - show fps\n    this.stats1 = new Stats()\n    this.stats1.showPanel(0) // Panel 0 = fps\n    this.stats1.domElement.style.cssText = \"position:absolute;top:0px;left:0px;\"\n    // this.container is the parent DOM element of the threejs canvas element\n    this.container.appendChild(this.stats1.domElement)\n\n    await updateLoadingProgressBar(1.0, 100)\n  },\n  // @param {number} interval - time elapsed between 2 frames\n  // @param {number} elapsed - total time elapsed since app start\n  updateScene(interval, elapsed) {\n    this.controls.update()\n    this.stats1.update()\n    // const now = new Date();\n    // const rotation = (2 * Math.PI) / 86164;\n    // this.earth.rotateY(rotation * (now - this.startTime) / 1000);\n    // this.startTime = now;\n    // this.earth.rotateY(interval * 0.005 * params.speedFactor)\n    // use rotateY instead of rotation.y so as to rotate by axis Y local to each mesh\n    // this.earth.rotateY(interval * 0.005 * params.speedFactor)\n    // this.clouds.rotateY(interval * 0.01 * params.speedFactor)\n\n  }\n}\n\n/**************************************************\n * 3. Run the app\n * 'runApp' will do most of the boilerplate setup code for you:\n * e.g. HTML container, window resize listener, mouse move/touch listener for shader uniforms, THREE.Clock() for animation\n * Executing this line puts everything together and runs the app\n * ps. if you don't use custom shaders, pass undefined to the 'uniforms'(2nd-last) param\n * ps. if you don't use post-processing, pass undefined to the 'composer'(last) param\n *************************************************/\nrunApp(app, scene, renderer, camera, true, undefined, undefined)\n\n\ncreateApp(App).mount('#app')\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/sat-viz/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkfrontend\"] = self[\"webpackChunkfrontend\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(2549); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createBlock","_component_MainPage","msg","_createElementBlock","_Fragment","_createTextVNode","_createElementVNode","_renderList","$data","items","item","index","key","_toDisplayString","name","props","String","data","mounted","this","fetchItems","methods","response","axios","get","headers","error","console","__exports__","components","MainPage","render","global","THREE","getDefaultUniforms","u_time","value","u_mouse","x","y","u_resolution","window","innerWidth","devicePixelRatio","innerHeight","runApp","app","scene","renderer","camera","enableAnimation","uniforms","composer","container","document","getElementById","appendChild","domElement","addEventListener","aspect","updateProjectionMatrix","setSize","undefined","resize","mouseListener","e","touches","clientX","clientY","updateScene","delta","elapsed","Object","assign","clock","animate","requestAnimationFrame","getDelta","getElapsedTime","initScene","then","veil","style","opacity","progressBar","info","reset","log","catch","createRenderer","rendererProps","configureRenderer","setPixelRatio","createCamera","fov","near","far","camPos","z","camLookAt","position","set","lookAt","updateLoadingProgressBar","async","frac","delay","Promise","resolve","progress","width","setTimeout","loadTexture","textureLoader","load","url","texture","enabled","antialias","_renderer","outputColorSpace","controls","OrbitControls","enableDamping","earthParameters","earthDayTexture","Day","colorSpace","anisotropy","earthNightTexture","Night","earthSpecularCloudsTexture","Clouds","envMap","StarMap","mapping","background","group","rotation","Math","PI","now","Date","dayOfYear","UTC","getFullYear","getMonth","getDate","declination","cos","earthTilt","utcHours","getUTCHours","getUTCMinutes","getUTCSeconds","sunAngle","sunDirection","sin","normalize","earthGeometry","earthMaterial","vertexShader","earthVertexShader","fragmentShader","earthFragmentShader","uDayTexture","uNightTexture","uSpecularCloudsTexture","uSunDirection","uAtmosphereDayColor","atmosphereDayColor","uAtmosphereTwilightColor","atmosphereTwilightColor","earth","add","atmosphereMaterial","atmosphereVertexShader","atmosphereFragmentShader","side","transparent","atmosphere","scale","sunSpherical","debugSun","stats1","Stats","showPanel","cssText","interval","update","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","keys","every","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","id","chunkLoadingGlobal","self","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}